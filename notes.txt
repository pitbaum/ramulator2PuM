/// For debug purposes use when compiling:
    cd build
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    make

// Deleted all non DDR4 files from the make files
    Since otherwise the states wont match and all other standards are irrelevant

// Still have some remnant files from the deletion

// Addr translation
    Not using any address translation

// trace read
    Command (R,W,C,F,M) Address (int)
    Need to use "path" instead of "traces" for the trace file path in the yaml


    Configure the project and build the executable
```bash
  $ mkdir build
  $ cd build
  $ cmake ..
  $ make -j
  $ cp ./ramulator2 ../ramulator2
  $ cd ..
```


inline static constexpr ImplDef m_levels = {
    "channel", "rank", "bankgroup", "bank", "row", "column",    
};

For only 1 channel and one rank
Otherwise cutoff will be smaller and there will be 2, 2 for ch, ra

[0] =
0 bits Ch
[1] = 
0 bits Ra
[2] =
2 bits Bg
[3] =
2 bits Ba
[4] =
15 bits Ro
[5] =
6 bits Co


00  00   1000 0000 0000 0000    1111 11   00 0000   134221792
Bg  Ba         Row                Col     Cut off 

same col different row: 134287296

same row different col: 134221504

different bank: 671092672


gdb ./ramulator2
run -f ./example_config.yaml
bt


static const std::vector<std::string> DDR4CommandNames = {
"ACT"0, 
"PRE"1, "PREA"2,
"RD"3,  "WR"4,  "RDA"5,  "WRA"6,
"REFab"7, "REFab_end"8,
"RC"9, "MAJ"10, "FRAC"11,
"ACTp"12, "ACTv"13,
 "PREv"14, "PREj"15, "PREf"16
};


inline static constexpr ImplDef m_states = {
"Opened"0, "Closed"1, "PowerUp"2, "N/A"3,
"Refreshing"4, "OpenedPum"5, 
"RCState"6, "MAJState"7, "Processed"8
};


State Diagram code: bLB1Yi8m5Bo_htXdmH_mi1ZI22ke9IruMFOWzeaLRKiJXMNPVz-yrwgfwC6SycOcCvEGgVERrfzFHu1zMH3IgV4_M93RjcNZoxe2-1fzutZyWVfOEofmWbckR0xzo0mh9cYM2SIefLrBRX-Oi0C8GPvGQMso37y1muh4guOgCLSw5wu71i6fDO-SDIhXX4G8cUvsZ-Ar_SnDKA-jCDqOoV-kBTFpubL5fgHb4xapA6rq9kUbwgMhr4DCfssz9UUkz-m4Tt1mLwkV-2_KF0euYEA6lPiG3Zw9k8bdLkakPpTq4MBWn0W_tfIgWh_IFm00



Command: ACTp, AddrVec: 0 0 0 0 16384 63 , m_clk: 23
Command: PREf, AddrVec: 0 0 0 0 16384 63 , m_clk: 24
Command: FRAC, AddrVec: 0 0 0 0 16384 63 , m_clk: 37
Command: ACTp, AddrVec: 0 0 0 0 16384 63 , m_clk: 38
Command: PREf, AddrVec: 0 0 0 0 16384 63 , m_clk: 39
Command: ACTp, AddrVec: 0 0 0 1 16384 63 , m_clk: 46
Command: PREf, AddrVec: 0 0 0 1 16384 63 , m_clk: 47
Command: FRAC, AddrVec: 0 0 0 0 16384 63 , m_clk: 52
Command: ACTp, AddrVec: 0 0 0 0 16384 63 , m_clk: 54
Command: PREj, AddrVec: 0 0 0 0 16384 63 , m_clk: 57
Command: FRAC, AddrVec: 0 0 0 1 16384 63 , m_clk: 60
Command: ACTp, AddrVec: 0 0 0 1 16384 63 , m_clk: 62
Command: PREf, AddrVec: 0 0 0 1 16384 63 , m_clk: 63
Command: ACTv, AddrVec: 0 0 0 0 16384 63 , m_clk: 64
Command: FRAC, AddrVec: 0 0 0 1 16384 63 , m_clk: 76
Command: MAJ, AddrVec: 0 0 0 0 16384 63 , m_clk: 77
Command: ACTp, AddrVec: 0 0 0 1 16384 63 , m_clk: 78
Command: PREj, AddrVec: 0 0 0 1 16384 63 , m_clk: 81
Command: ACTv, AddrVec: 0 0 0 1 16384 63 , m_clk: 87
Command: MAJ, AddrVec: 0 0 0 1 16384 63 , m_clk: 100


TO run the main with read write trace, change the following in main:
  for (uint64_t i = 0;; i++) {
    if (((i % tick_mult) % mem_tick) == 0) { 
      if (!frontend->is_finished()) {
        frontend->tick();
      }
    }

    if (frontend->is_finished() && i > 100000) {
      break;
    }

such that it wont directly stop as soon as the front end stopped sending over requests

